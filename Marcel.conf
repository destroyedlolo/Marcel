# Marcel.conf
#	This file contains the configuration for Marcel

# NOTEZ-BIEN : starting v6.02, each section must have an unique identifier
#( Work In Progress in this current file)

# Which is the minimum expected version for Marcel
MinVersion=6.1101

# Global settings
# URL to reach the broker
Broker=tcp://localhost:1883

# ClientID to connect to the broker
# In case you have more than one Marcel connected to a single broker
# you MUST set an uniq ID per Marcel instance.
#ClientID=Marcel

# Crash if we lost the connection with the broker
ConnectionLostIsFatal

# When set outside $notification section, RESTUrl and AlertCommand
# handle respectively 'Alert/' and 'Notification/' topics

# in all definitions
# %m% is replaced by the message
# %t% is replaced by the title

# SMS alerting
# the provided URL is for Freemobile.
RESTUrl=https://smsapi.free-mobile.fr/sendmsg?user=xxxxxxxx&pass=xxxxxxxxxxxxxx&msg=%m%
# replace xxxx by your account granting
# PLEASE SHARE IF YOU ADDAPT FOR ANOTHER ISP.

#send alert as mail
# The message body is put in stdin
AlertCommand=mail -s "%t%" mail@domain.com


# Named notification sections

# Send alerts thru a web service

# Pushingbox example
$notification=1
RESTUrl=http://api.pushingbox.com/pushingbox?devid=xxxxxxxxxxx&titre=%t%&msg=%m%

# SMS example
$notification=2
RESTUrl=https://smsapi.free-mobile.fr/sendmsg?user=xxxxxxxx&pass=xxxxxxxxxxxxxx&msg=%m%

# Mail example
# The message body is put in stdin
$notification=3
AlertCommand=mail -s "%t%" mail@domain.com

# User functions definition
# used for DPD, Every, REST & OutFile
# Only one UserFuncScript directive can be present. Consequently, if you want
# functions spread among different file, create a "glue" script that call all
# others (as with provided scripts/AllScripts.lua one).
UserFuncScript=scripts/AllScripts.lua

# "serial" port on which RFXtrx is plugged to
# I strongly suggest to use by-id or by-path mapping instead of
# /dev/ttyUSB?? as the last one may depend on plugged devices
RFXtrx_Port=/dev/serial/by-id/usb-RFXCOM_RFXtrx433_A13X8IX-if00-port0

#
# 1-wire alarms handling
#

# Alarm directory
1wire-Alarm=/var/lib/owfs/mnt/alarm

# Alarm delay b/w sample (in seconds)
1wire-Alarm-sample=60

# Errors aren't fatal for 1-wire alarm detection
1wire-Alarm-keep

# Read a "file float value" file
# (typical usage : 1-wire temperature exposed as owfs' file)
# File : file to read
# Topic : topic to publish to.
# 	(if missing, the uid is used instead)
# Sample : Delay b/w sample. 
#	If not present (or 0), will be grouped in the same thread as the previous one
#	If forced to -1, launched only once.
# Func : Lua function to be called : func(id, topic, val)
# 	arguments :
# 	-> id : context id
# 	-> topic associated to this FFV
# 	-> val : value read (offset ignored)
# 	return :
# 	<- true if the value has to be published
# 	<- false don't publish the value
# Latch : if set, write to this file to reset the probe's latch
# safe85 : if the read value is 85, data is not published and an 'E' error is raised. It's mostly done for temperature probe where 85Â° means the probe is underpowered
# Disabled : starts disabled

#*FFV=TSTMauvais
#File=/nonexistant
#Topic=maison/Temperature/Bad
#Sample=60

*FFV=Porte cave
File=/var/lib/owfs/mnt/12.16CCCC000000/sensed.BYTE
Topic=maison/IO/Porte_Cave
Sample=-1
Latch=/var/lib/owfs/mnt/12.16CCCC000000/latch.BYTE

*FFV=Exterieur
File=/var/lib/owfs/mnt/28.FF7BF0001502/temperature
Topic=maison/Temperature/Dehors
Sample=30
safe85

*FFV=Cave
File=/var/lib/owfs/mnt/28.FF5EEF001502/temperature
Topic=maison/Temperature/Cave
safe85

*FFV=Grenier Nord
File=/var/lib/owfs/mnt/28.FF8B0D011502/temperature
Topic=maison/Temperature/Grenier Nord
Func=MemoriseTempGrNord
Sample=30
safe85

# this FFV will be activated when DecPluie will be put on
*FFV=Pluie
File=/var/lib/owfs/mnt/42.925247000000/sensed.B
Topic=maison/IO/Pluie
Disabled

*OutFile=Pompe piscine
Topic=maison/IO/Pompe_Piscine
File=/var/lib/owfs/mnt/12.AC0BD0000000/PIO.A
Disabled

# It's an optimisation
# if set, all LookForChanges are grouped meaning Marcel
# will lookup for the 1st one in its configuration and
# stop L4C list as soon as it found a section with a different type
LookForChangesGrouped

# Send notification when a directory content changes
# require INOTIFY support
*LookForChanges=watch /tmp
Topic=Notification_tmp
On=/tmp
# flags to look for
# 	create : including file moved to the directory
# 	remove : including file moved away
#	modify : including attribut changes
For=create remove modify
#Disabled

# Read Freebox statistics
# Note : the uid of this section is hardcoded to Freebox
# as by design, only one device is accessible.
# If Topic missing, it set to 'Freebox' as well
*Freebox
Topic=Freebox
Sample=60
#Disabled
# If not set, the thread's dying at error so data are not queried again
Keep

# Read UPS figures
# uid of the section is the UPS name as defined in NUT
# Topic : root of the tree to publish var to
# 	(if missing, the uid is used instead)
# Host : host where NUT is running
# Port : on which port it is reachable
# Var : list of NUT variables to export
*UPS=onduleur
Topic=onduleur
Sample=15
Host=bPI.chez.moi
Port=3493
Var=ups.load
Var=ups.realpower.nominal
Var=battery.charge
Var=battery.charge.warning
Var=input.voltage
Var=input.transfer.high
Var=input.transfer.low
#Disabled
# If not set, the thread's dying at error so data are not queried again
Keep

# Call a function 'Every' seconds
# Uid of the section is passed as argument to the called function
# (may be overwriten by 'Topic=' but some bytes are lost in this case)
*Every=Publish system load
Sample=15
Func=PublishLoad
#Disabled

# it's also possible to launch a script at a predefined time
# Notez-bien :
# - Immediate override At
# - At override Sample
*Every=Vacances Aujourd'hui
At=0214
Func=DetermineVacancesAujourdHui
Sample=15
RunIfOver
#Immediate

# Query REST url and call a Lua function to process the result
# Url : the url to query
# Sample : query at the given interval
# At : absolute hour to qurery (HHMM)
# Func : function to call
# RunIfOver : query immediately if time (for the day) is over
# Immediate : run it at launch and then wait
# Disabled : starts disabled
#
# If both Sample and At are present, only At is take in account
#
# In provided example, REST webservice is called to determine if
# we are in hollidays.

#*REST=Vacances Aujourd'hui
#Url=http://domogeek.entropialux.com/holidayall/A/now
#At=0154
#Sample=60
#Func=DetermineVacances
#RunIfOver
#Immediate

# Query short term meteo from OpenWeatherMap.org
# Topic : Root for published data
# Sample : delay b/w 2 queries in seconds (minimum is 600s)
# City : CityName,Country (mandatory)
# Unit : metric (default), imperial or Standard
# Lang : language (almost)
# Disabled : starts disabled
#
# Have a look on OpenWeatherMap.org for explanation of all fields values
*Meteo3H=Meteo court terme Nonglard
Topic=Meteo3H/Nonglard
Sample=1800
City=nonglard,fr
Units=metric
Lang=fr

# Query Daily meteo from OpenWeatherMap.org
# Topic : Root for published data
# Sample : delay b/w 2 queries in seconds (minimum is 600s)
# City : CityName,Country (mandatory)
# Unit : metric (default), imperial or Standard
# Lang : language (almost)
# Disabled : starts disabled
#
# Have a look on OpenWeatherMap.org for explanation of all fields values
*MeteoDaily=Meteo long term Nonglard
Topic=Meteo/Nonglard
Sample=1800
City=nonglard,fr
Units=metric
Lang=fr

# This keyword indicates that all subscriptions are grouped at
# the end of the configuration.
# It's an optimisation option : Marcel will scan subscriptions from
# the end of the configuration and will stop as soon as it
# found another section.
SubLast

# Alerting if some figures don't come in time
# (dead publisher detection)
# argument of the section is the error identifier as well as section UID
# Topic=Topic to wait data from
# Sample=Timeout to raise an error
# Disabled : starts disabled
*DPD=Dpd test
Topic=Test
Sample=10

# User defined checking function
# Function arguments are
# 	topic : received topic
# 	msg : value
*DPD=UPS battery charge
Topic=onduleur/battery.charge
Func=UPSBatCharge
# Keep is dangerous for DPD as it may create a busy wait
# loop with a sleeping time of 1 second.
#Keep

# Commanding Somfy (RTS) shutter
# ID = the id of device
# in hexadecimal I1I2I3UU :
# 	I? = identifier
# 	UU = unit
#
# The command is the payload of the message.
# Recognized commands are :
# 	"Stop" or "My"
# 	"Up"
# 	"Down"
*RTSCmd=Volet Cheminee
ID=0x03509403
Topic=maison/Volet/Salon/Cheminee

*RTSCmd=Volet Porte Cuisine
ID=0x02509401
Topic=maison/Volet/Cuisine/Porte
#Disabled

# Outfile allows to control external devices exposed as files
# by Unix kernel.
# Topic=topic from which we are looking for values
# 	(if missing, the uid is used instead)
# File=received data are written to it
# Func = Lua function to be called after the file is written
# 	arguments are :
# 		section_name : the uid of the calling section
# 		val : value written to the outfile
# Disabled : starts disabled

*OutFile=Detecteur de pluie
Topic=maison/IO/DetPluie
File=/var/lib/owfs/mnt/12.DF0ED0000000/PIO.A
Func=ActiveTopicPluie

# or for the same
# *OutFile=maison/IO/DetPluie
# File=/var/lib/owfs/mnt/42.925247000000/PIO.A
